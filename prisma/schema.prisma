generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  memberships   SchoolMembership[]
  activityLogs  ActivityLog[]
  invitations   SchoolInvitation[]
  teacherAssignments TeacherAssignement[]

  @@map("sgs_users")
}

model School {
  id          String    @id @default(cuid())
  name        String
  location    String
  country     String?
  city        String?
  phone       String?
  bio         String?
  logo        String?
  website     String?
  facebook    String?
  twitter     String?
  instagram   String?
  members     SchoolMembership[]
  invitations SchoolInvitation[]
  classes     Class[]
  subjects    Subject[]
  students    Student[]
  academicYears AcademicYear[]
  educationLevels EducationLevel[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("sgs_schools")
}

model SchoolMembership {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  role      String     @default("TEACHER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, schoolId])
  @@map("sgs_school_memberships")
}

model SchoolInvitation {
  id        String   @id @default(cuid())
  email     String
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  role      String     @default("TEACHER")
  token     String   @unique
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  status    String @default("PENDING")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sgs_school_invitations")
}

model TeacherAssignement {
  id            String    @id @default(cuid())
  teacher       User      @relation(fields: [teacherId], references: [id])
  teacherId     String
  subject       Subject   @relation(fields: [subjectId], references: [id])
  subjectId     String
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String
  class         Class     @relation(fields: [classId], references: [id])
  classId       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([teacherId, subjectId, classId, academicYearId])
  @@map("sgs_teacher_assignment")
}

model AcademicYear {
  id              String    @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  isCurrent       Boolean   @default(false)
  school          School    @relation(fields: [schoolId], references: [id])
  schoolId        String
  students        StudentEnrollment[]
  teacherAssignments TeacherAssignement[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("sgs_academic_years")
}

model EducationLevel {
  id        String    @id @default(cuid())
  name      String
  order     Int
  school  School @relation(fields: [schoolId], references: [id])
  schoolId  String
  classes   Class[]

  @@map("sgs_education_levels")
}

model Class {
  id              String    @id @default(cuid())
  name            String
  order           Int       @default(0)
  level           EducationLevel @relation(fields: [levelId], references: [id])
  levelId         String
  school          School    @relation(fields: [schoolId], references: [id])
  schoolId        String
  subjects        SubjectClass[]
  students        StudentEnrollment[]
  teacherAssignments TeacherAssignement[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("sgs_classes")
}

model Subject {
  id              String    @id @default(cuid())
  name            String
  school          School    @relation(fields: [schoolId], references: [id])
  schoolId        String
  classes         SubjectClass[]
  teacherAssignments TeacherAssignement[]
  studentGrades   Grades[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("sgs_subjects")
}

model SubjectClass {
  id          String    @id @default(cuid())
  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  class       Class     @relation(fields: [classId], references: [id])
  classId     String
  coefficient Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("sgs_subject_classes")
}

model Student {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  studentId   String?   @unique
  school      School    @relation(fields: [schoolId], references: [id])
  schoolId    String
  enrollments StudentEnrollment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("sgs_students")
}

model StudentEnrollment {
  id            String    @id @default(cuid())
  student       Student   @relation(fields: [studentId], references: [id])
  studentId     String
  class         Class     @relation(fields: [classId], references: [id])
  classId       String
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String
  grades Grades[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("sgs_student_enrollments")
}

model Grades {
  id            String    @id @default(cuid())
  value         Float
  period        String // MONTHLY or QUARTERLY
  month         Int?
  term          Int?
  enrollment    StudentEnrollment @relation(fields: [enrollmentId], references: [id])
  subject       Subject @relation(fields: [subjectId], references: [id])
  subjectId     String
  enrollmentId  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("sgs_grades")
}

model ActivityLog {
  id          String    @id @default(cuid())
  action      String
  details     String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())

  @@map("sgs_activity_logs")
}
